<launch>
    <arg name="id" default="0"/>
    <arg name="x_pos" default="0.0"/>
    <arg name="y_pos" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <!--    Arguments henceforth aren't meant to be configuration arguments. DO NOT CHANGE THEM WHILE INCLUDING
            THIS FILE IN OTHER LAUNCH FILES!!
    -->

    <arg name="frame" default="robot"/>

    <!--    Unique ID of the robot -->
    <arg name="uid" value="$(arg frame)_$(arg id)"/>

    <group ns="$(arg uid)">
        <param name="tf_prefix" value="$(arg uid)"/>

        <!--    EKF State Estimation node -->
        <!--    Not required if Gazebo is publishing the odom<->base_link tf -->
        <!--        <include file="$(find filters)/launch/ekf.launch"/>-->

        <!--    Even after specifying the `tf_prefix` param, frame_id in IMU messages still seem to be `base_footprint`.
                Hence the frame id is manually set to `tf_prefix`/base_footprint using a simple python script.
                This corrected IMU messages are the ones that are passed to the EKF node for state estimation.
        -->

        <node pkg="filters" type="imu_frame_id_correction.py" name="imu_frame_id_correction" output="screen"
              clear_params="true">
            <remap from="imu_in" to="imu"/>
            <remap from="imu_out" to="imu/frame_id_corrected"/>
        </node>

        <!--    Localization -->
        <group>
<!--            <include file="$(find navigation)/launch/amcl.launch">-->
<!--                <arg name="odom_frame" value="$(arg uid)/odom"/>-->
<!--                <arg name="base_frame" value="$(arg uid)/base_footprint"/>-->
<!--                <arg name="initial_pose_x" value="$(arg x_pos)"/>-->
<!--                <arg name="initial_pose_y" value="$(arg y_pos)"/>-->
<!--                <arg name="initial_pose_a" value="$(arg yaw)"/>-->
<!--            </include>-->

            <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom_tf_broadcaster"
                  args="0 0 0 0 0 0 map $(arg uid)/odom"/>

            <group ns="map_merge">
                <param name="init_pose_x" value="$(arg x_pos)"/>
                <param name="init_pose_y" value="$(arg y_pos)"/>
                <param name="init_pose_z" value="0.0"/>
                <!--    Don't place value of arg `yaw` here, for some reason this seems to mess up
                map merging -->
                <param name="init_pose_yaw" value="0.0"/>
            </group>
        </group>

        <node name="interpolator" pkg="tracking_pid" type="path_interpolator">
            <param name="target_x_vel" value="0.3"/>
            <param name="target_yaw_vel" value="0.5"/>
            <remap from="path" to="waypoints"/>
        </node>

        <!--Tracking_pid tries to get the robot as close to it's goal point as possible-->
        <node name="controller" pkg="tracking_pid" type="controller" output="screen">
            <remap from="move_base/cmd_vel" to="cmd_vel"/>
            <remap from="local_trajectory" to="trajectory"/>
            <param name="controller_debug_enabled" value="True"/>
            <param name="track_base_link" value="true"/>
            <param name="base_link_frame" value="$(arg uid)/base_footprint"/>

            <param name="l" value="0.5"/>
            <param name="Ki_long" value="0.0"/>
            <param name="Kp_long" value="2.0"/>
            <param name="Kd_long" value="0.5"/>
            <param name="Ki_lat" value="0.0"/>
            <param name="Kp_lat" value="4.0"/>
            <param name="Kd_lat" value="0.3"/>
        </node>

        <!--    Move Base -->
<!--        <include file="$(find navigation)/launch/move_base_coverage.launch">-->
<!--            <arg name="robot_base_frame" value="$(arg uid)/base_footprint"/>-->
<!--            <arg name="odom_frame" value="$(arg uid)/odom"/>-->
<!--            <arg name="scan_frame" value="$(arg uid)/base_scan"/>-->
<!--        </include>-->

        <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_$(arg uid)_cov_map_tf_broadcaster"
              args="0 0 0 0 0 0 map $(arg uid)/coverage_grid"/>

        <include file="$(find full_coverage_path_planner)/launch/coverage_progress.launch">
            <arg name="coverage_frame" value="$(arg uid)/base_footprint"/>
            <arg name="map_frame" value="$(arg uid)/coverage_grid"/>
        </include>

    </group>

</launch>